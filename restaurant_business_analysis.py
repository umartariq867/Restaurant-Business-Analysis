# -*- coding: utf-8 -*-
"""Restaurant Business Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ioML2QHhhP9_btPnIJP_PEZlxj1YXu3b
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

top = pd.read_csv('/content/Top250.csv')
indep =  pd.read_csv('/content/Independence100.csv')

top.head(30)

top.info()

top[top.isnull()==False].count()

# Content, Headquaters have Null values

# To see 'Segment_Category' distribution

category_top = top.groupby(by=['Segment_Category']).Sales.sum().sort_values(ascending=False).head(10).reset_index()

import plotly.express as px
px.bar(category_top, x='Sales', y='Segment_Category')

# It seems like 'Quick Service & Burger' beats the others overwhelminglly, so let's check category into services and kinds

service = []
for i in range(len(top)):
    if len(top.Segment_Category.iloc[i].split('&')) != 1:
        service.append(top.Segment_Category.iloc[i].split('&')[0])
    else:
        service.append('NaN')
top['Services'] = service        
top['Food_kinds'] =  top.Segment_Category.apply(lambda d:d.split('&')[-1]).apply(lambda d:d.strip())

top_Services = top.groupby(by='Services').Sales.sum().sort_values(ascending=False).reset_index()
top_Foods = top.groupby(by='Food_kinds').Sales.sum().sort_values(ascending=False).reset_index()
top_Foods.Food_kinds.apply(lambda d:d.rstrip())
px.bar(top_Services, x='Sales', y='Services', title='Services and Salses Relation', width=1500, height=1000)

px.bar(top_Foods, x='Sales', y='Food_kinds', title='Kind of Foods and Salses Relation', width=1500, height=1000)

px.pie(top_Foods, values='Sales', names='Food_kinds',title='Kind of Foods and Salses Relation with pie graph', width=1000, height=1000 )

# How about 'increasing kinds of food'
top['YOY_Sales'] = top['YOY_Sales'].apply(lambda d: float(d.split('%')[0]))

top_yoy_sales = top.groupby(by = 'Food_kinds').YOY_Sales.mean().sort_values(ascending=False).reset_index()

px.bar(top_yoy_sales, x='Food_kinds', y='YOY_Sales', color='YOY_Sales')

# Burger sales:84889, Healthy:184 in this year, however the growth of former is 3.27 and the later is 16.8

import plotly.graph_objects as go

burger = [84889]
healthy = [184]
chicken = [29153]
for i in range(20):
    burger.append(burger[-1]*(1.0327))
    healthy.append(healthy[-1]*(1.168))
    chicken.append(chicken[-1]*(1.74))
fig = go.Figure()
# Create and style traces
fig.add_trace(go.Scatter(x=[i for i in range(20)], y=burger, name='Burger',
                         line=dict(color='firebrick', width=4)))
fig.add_trace(go.Scatter(x=[i for i in range(20)], y=healthy, name = 'Healthy',
                         line=dict(color='royalblue', width=4)))
fig.add_trace(go.Scatter(x=[i for i in range(20)], y=chicken, name = 'Chicken',
                         line=dict(color='rgb(67,67,67)', width=4)))

fig.update_layout(title='Burger, Chicken and Healthy feature prediction(simple)',
                   xaxis_title='year',
                   yaxis_title='Salses')


fig.show()

# I reckon that the factor that has positive unit rate and YOY_sales would be good selection

top.YOY_Units = top.YOY_Units.apply(lambda d:float(d.split('%')[0]))

top_sales_unit = top[(top.YOY_Sales > 0) & (top.YOY_Units > 0)]

top_sales_unit['YOY'] = top_sales_unit.YOY_Sales + top_sales_unit.YOY_Units

top_YOY = top_sales_unit.sort_values(by='YOY', ascending=False)
top_YOY.head(10)

# What Restaurant is a good prospect is Chicken Salad Chick since this is the type of a chicken shop and has a word salad which might be able to induce those who want to take in a healty thing.

feature = pd.read_csv('/content/Future50.csv')
feature.head(10)

# Analyse the Franchising situation on States

feature['States'] = feature.Location.apply(lambda d: d.split(',')[-1].lstrip().replace('.', ''))

feature['YOY_Sales'] = feature['YOY_Sales'].apply(lambda d:float(d.split('%')[0]))
feature['YOY_Units'] = feature['YOY_Units'].apply(lambda d:float(d.split('%')[0]))

feature['YOY_Sales'] = feature['YOY_Sales'].apply(lambda d:d*0.01)
feature['YOY_Units'] = feature['YOY_Units'].apply(lambda d:d*0.01)

feature['Previous_Sales'] = (feature.Sales/(feature.YOY_Sales+1)).round(2)
feature['Previous_Units'] = (feature.Units/(feature.YOY_Units+1)).round(2)
feature.head(10)

this_two_years_growth = feature.groupby(by=['States'])[['Sales', 'Previous_Sales']].sum().reset_index()
#this_two_years_growth['growth_sales'] =

this_two_years_growth['diff'] = this_two_years_growth['Sales'] - this_two_years_growth['Previous_Sales']
this_two_years_growth.sort_values(by=['diff'], ascending=False, inplace=True)
this_two_years_growth = this_two_years_growth.reset_index()
this_two_years_growth.drop(columns=['index'], inplace=True)
px.scatter(this_two_years_growth, x="Previous_Sales", y="Sales", color="diff")

# This is feature premise restaurant data, so the correlation between previous and current year can be nearly 1.

import seaborn as sns
this_two_years_growth_corr = this_two_years_growth.iloc[:,1:]

corr = this_two_years_growth_corr.corr()
sns.heatmap(corr, square=True, annot=True)

# How about Unit
unit_two_years_growth = feature.groupby(by=['States'])[['Units', 'Previous_Units']].sum().reset_index()
unit_two_years_growth['unit_diff'] = unit_two_years_growth['Units'] - unit_two_years_growth['Previous_Units']
unit_two_years_growth.sort_values(by=['unit_diff'], ascending=False, inplace=True)
unit_two_years_growth = unit_two_years_growth.reset_index()
unit_two_years_growth.drop(columns=['index'], inplace=True)
px.scatter(unit_two_years_growth, x="Previous_Units", y="Units", color="unit_diff", title='2 years Unit relation')

px.pie(this_two_years_growth.head(10), values='Sales', names='States', title='Current year sales in each states')

px.pie(this_two_years_growth.head(10), values='Previous_Sales', names='States', title='Previous year sales in each states')

px.pie(this_two_years_growth.head(10), values='diff', names='States', title='Difference year sales in each states')

# The down_to_earth place to set your business are apparently NY or California. But where has a big growth rate is NC, so the feature prediction that NC is potential to surpass both two states.